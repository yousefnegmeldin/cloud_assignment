
AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation template for Event-Driven Order Notification System

Resources:

  OrdersDynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Orders
      AttributeDefinitions:
        - AttributeName: orderId
          AttributeType: S
      KeySchema:
        - AttributeName: orderId
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  OrderDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: OrderDLQ

  OrderQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: OrderQueue
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt OrderDLQ.Arn
        maxReceiveCount: 3

  OrderTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: OrderTopic

  OrderQueueSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: sqs
      TopicArn: !Ref OrderTopic
      Endpoint: !GetAtt OrderQueue.Arn
      RawMessageDelivery: true

  SQSPolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref OrderQueue
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal: "*"
            Action: "SQS:SendMessage"
            Resource: !GetAtt OrderQueue.Arn
            Condition:
              ArnEquals:
                aws:SourceArn: !Ref OrderTopic

  ProcessOrderLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: ProcessOrderLambdaRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: OrderProcessingPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                Resource: !GetAtt OrdersDynamoDBTable.Arn
              - Effect: Allow
                Action:
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                Resource: !GetAtt OrderQueue.Arn
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"

  ProcessOrderLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: ProcessOrderFunction
      Runtime: nodejs18.x
      Handler: index.handler
      Role: !GetAtt ProcessOrderLambdaRole.Arn
      Code:
        ZipFile: |
import { DynamoDBClient, PutItemCommand } from "@aws-sdk/client-dynamodb";

const ddb = new DynamoDBClient({ region: "eu-central-1" });

export const handler = async (event) => {
  try {
    for (const record of event.Records) {
      const outerBody = JSON.parse(record.body);
      const snsMessage = JSON.parse(outerBody.Message); // Get the actual order object

      console.log("Received order:", snsMessage);

      const putCommand = new PutItemCommand({
        TableName: "Orders",
        Item: {
          orderId: { S: snsMessage.orderId },
          userId: { S: snsMessage.userId },
          itemName: { S: snsMessage.itemName },
          quantity: { N: snsMessage.quantity.toString() },
          status: { S: snsMessage.status },
          timestamp: { S: snsMessage.timestamp },
        },
      });

      await ddb.send(putCommand);

      console.log(`Order ${snsMessage.orderId} inserted into DynamoDB.`);
    }

    return {
      statusCode: 200,
      body: JSON.stringify("Orders processed successfully."),
    };
  } catch (error) {
    console.error("Error processing orders:", error);
    throw error;
  }
};

      Events:
        SQSTrigger:
          Type: SQS
          Properties:
            Queue: !GetAtt OrderQueue.Arn
